//
// File generated by /nfs/data40/t2k/amissert/ROOT2/root/bin/rootcint at Mon Nov 28 18:57:21 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dInfsdIdata41dIt2kdIamissertdIatmosdIheaddIatmFitToolsdIhistoManager_cxx_ACLiC_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "histoManager_cxx_ACLiC_dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::histoManager histoManager;
      #else
      class histoManager  {
         public:
         //friend XX;
         ::TString nameTag; //name associated with this instance
         ::TFile* fout; //output file for filled histograms
         ::TFile* fin; //input file of histos to be read from memory
         int nSamples; //number of data samples
         int nComponents; //number of MC components
         int nAttributes; //number of attributes (fiTQun outputs)
         int nBins; //number of bins in data
         int nModes; //
         ::TH1D* hMC[5][10][8][6]; //array of all MC histograms
         ::TH1D* hMCModified[5][10][8][6]; //array of all MODIFIED MC histograms
         ::TH1D* hSumHisto[5][10][6]; //
         ::TH1D* hSumHistoMod[5][10][6]; //
         ::TH1D* hMCNeut[5][10][8][10][6]; //
         ::TH1D* hMCNeutModified[5][10][8][10][6]; //
         ::TH1D* hMCNeutNom[5][10][8][10][6]; //
         ::TH1D* hMod; //
         ::TH1D* hSum; //
         ::TH1D* hTmp; //
         ::TGraph* gTmp; //
         ::TGraph* gSum; //
         double gTotIntegral; //
         int useSplineFlg; //
         int useNormFlg; //< toggles normalization parameters when getting modified histograms
         double normFactor; //
         double histoLogL; //
         double nDOF; //
         int nBinBuffer; //< number of bins near edge of histogram to ignore when calculating likelihood
         ::hSplines* theSplines[5][10][8][6]; //splines for flux/xsec params
         ::hSplines* moreSplines[5][10][8][10][6]; //
         double physicalLoBound[6]; //< stores physical lower bounds
         int applyPhysicalBound[6]; //< flg for applying physical bounds
         ::TH1D* hData[5][10][6]; //array of all Data histograms
         ::TLegend* Leg; //for histogram drawing methods
         ::TH2D* h2d; //for 2D debugging histograms
         double binContents[1000]; //< stores temporary bin contents for faster modificatoins
         bool separateNeutMode; //
         double hMCMean[5][10][8][6]; //
         ::atmFitPars* fitPars; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void histoManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void histoManager_Dictionary();
   static void delete_histoManager(void *p);
   static void deleteArray_histoManager(void *p);
   static void destruct_histoManager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::histoManager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::histoManager) == sizeof(::ROOT::Shadow::histoManager));
      ::histoManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::histoManager),0);
      static ::ROOT::TGenericClassInfo 
         instance("histoManager", "/nfs/data41/t2k/amissert/atmos/head/atmFitTools/./histoManager.h", 30,
                  typeid(::histoManager), DefineBehavior(ptr, ptr),
                  &histoManager_ShowMembers, &histoManager_Dictionary, isa_proxy, 4,
                  sizeof(::histoManager) );
      instance.SetDelete(&delete_histoManager);
      instance.SetDeleteArray(&deleteArray_histoManager);
      instance.SetDestructor(&destruct_histoManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::histoManager*)
   {
      return GenerateInitInstanceLocal((::histoManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::histoManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void histoManager_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::histoManager*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void histoManager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class histoManager.
      typedef ::ROOT::Shadow::histoManager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::histoManager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameTag", &sobj->nameTag);
      R__insp.InspectMember(sobj->nameTag, "nameTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fout", &sobj->fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fin", &sobj->fin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSamples", &sobj->nSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nComponents", &sobj->nComponents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nAttributes", &sobj->nAttributes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBins", &sobj->nBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModes", &sobj->nModes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMC[5][10][8][6]", &sobj->hMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMCModified[5][10][8][6]", &sobj->hMCModified);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hSumHisto[5][10][6]", &sobj->hSumHisto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hSumHistoMod[5][10][6]", &sobj->hSumHistoMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMCNeut[5][10][8][10][6]", &sobj->hMCNeut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMCNeutModified[5][10][8][10][6]", &sobj->hMCNeutModified);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMCNeutNom[5][10][8][10][6]", &sobj->hMCNeutNom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMod", &sobj->hMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hSum", &sobj->hSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hTmp", &sobj->hTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gTmp", &sobj->gTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gSum", &sobj->gSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gTotIntegral", &sobj->gTotIntegral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useSplineFlg", &sobj->useSplineFlg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useNormFlg", &sobj->useNormFlg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normFactor", &sobj->normFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histoLogL", &sobj->histoLogL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDOF", &sobj->nDOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinBuffer", &sobj->nBinBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*theSplines[5][10][8][6]", &sobj->theSplines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*moreSplines[5][10][8][10][6]", &sobj->moreSplines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "physicalLoBound[6]", sobj->physicalLoBound);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "applyPhysicalBound[6]", sobj->applyPhysicalBound);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hData[5][10][6]", &sobj->hData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Leg", &sobj->Leg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h2d", &sobj->h2d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "binContents[1000]", sobj->binContents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "separateNeutMode", &sobj->separateNeutMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMCMean[5][10][8][6]", sobj->hMCMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitPars", &sobj->fitPars);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_histoManager(void *p) {
      delete ((::histoManager*)p);
   }
   static void deleteArray_histoManager(void *p) {
      delete [] ((::histoManager*)p);
   }
   static void destruct_histoManager(void *p) {
      typedef ::histoManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::histoManager

/********************************************************
* /nfs/data41/t2k/amissert/atmos/head/atmFitTools/histoManager_cxx_ACLiC_dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablehistoManager_cxx_ACLiC_dict();

extern "C" void G__set_cpp_environmenthistoManager_cxx_ACLiC_dict() {
  G__cpp_reset_tagtablehistoManager_cxx_ACLiC_dict();
}
#include <new>
extern "C" int G__cpp_dllrevhistoManager_cxx_ACLiC_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* histoManager */
static int G__histoManager_cxx_ACLiC_dict_3304_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   histoManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) histoManager(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   histoManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (bool) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (bool) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   histoManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new histoManager((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) histoManager((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   histoManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) histoManager(
(const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) histoManager((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new histoManager((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) histoManager((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->setFitPars((atmFitPars*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->initHistos();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((histoManager*) G__getstructoffset())->fillHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((histoManager*) G__getstructoffset())->fillHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((histoManager*) G__getstructoffset())->fillHistogramData((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((histoManager*) G__getstructoffset())->fillHistogramData((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->setHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (TH1D*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->setLoBound((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getModHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getModHistogramMC((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getModGraph((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getModHistogramSlow((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getHistogramData((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getSplines((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getSumHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getSumHistogram((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getSumHistogramMod((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getSumHistogramMod((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->getSplineModifiedHisto((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((histoManager*) G__getstructoffset())->getSplineModifiedBin((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->showMCBreakdown((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->printBreakdownPlots((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((histoManager*) G__getstructoffset())->showMCBreakdownStack((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((histoManager*) G__getstructoffset())->readFromFile((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((histoManager*) G__getstructoffset())->readFromFile((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->readSplinesFromFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->drawSpline((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->drawSpline2D((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((histoManager*) G__getstructoffset())->showErrorComparison((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__histoManager_cxx_ACLiC_dict_3304_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((histoManager*) G__getstructoffset())->showSysParVariation((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((histoManager*) G__getstructoffset())->showSysParVariation((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__histoManager_cxx_ACLiC_dict_3304_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   histoManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new histoManager(*(histoManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef histoManager G__ThistoManager;
static int G__histoManager_cxx_ACLiC_dict_3304_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (histoManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((histoManager*) (soff+(sizeof(histoManager)*i)))->~G__ThistoManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (histoManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((histoManager*) (soff))->~G__ThistoManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__histoManager_cxx_ACLiC_dict_3304_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   histoManager* dest = (histoManager*) G__getstructoffset();
   *dest = *(histoManager*) libp->para[0].ref;
   const histoManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* histoManager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunchistoManager_cxx_ACLiC_dict {
 public:
  G__Sizep2memfunchistoManager_cxx_ACLiC_dict(): p(&G__Sizep2memfunchistoManager_cxx_ACLiC_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunchistoManager_cxx_ACLiC_dict::*p)();
};

size_t G__get_sizep2memfunchistoManager_cxx_ACLiC_dict()
{
  G__Sizep2memfunchistoManager_cxx_ACLiC_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancehistoManager_cxx_ACLiC_dict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablehistoManager_cxx_ACLiC_dict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TString>",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TString,less<string> >",117,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* histoManager */
static void G__setup_memvarhistoManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   { histoManager *p; p=(histoManager*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nameTag)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TString),-1,-1,1,"nameTag=",0,"name associated with this instance");
   G__memvar_setup((void*)((long)(&p->fout)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TFile),-1,-1,1,"fout=",0,"output file for filled histograms");
   G__memvar_setup((void*)((long)(&p->fin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TFile),-1,-1,1,"fin=",0,"input file of histos to be read from memory");
   G__memvar_setup((void*)((long)(&p->nSamples)-(long)(p)),105,0,0,-1,-1,-1,1,"nSamples=",0,"number of data samples");
   G__memvar_setup((void*)((long)(&p->nComponents)-(long)(p)),105,0,0,-1,-1,-1,1,"nComponents=",0,"number of MC components");
   G__memvar_setup((void*)((long)(&p->nAttributes)-(long)(p)),105,0,0,-1,-1,-1,1,"nAttributes=",0,"number of attributes (fiTQun outputs)");
   G__memvar_setup((void*)((long)(&p->nBins)-(long)(p)),105,0,0,-1,-1,-1,1,"nBins=",0,"number of bins in data");
   G__memvar_setup((void*)((long)(&p->nModes)-(long)(p)),105,0,0,-1,-1,-1,1,"nModes=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hMC)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMC[5][10][8][6]=",0,"array of all MC histograms");
   G__memvar_setup((void*)((long)(&p->hMCModified)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMCModified[5][10][8][6]=",0,"array of all MODIFIED MC histograms");
   G__memvar_setup((void*)((long)(&p->hSumHisto)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hSumHisto[5][10][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hSumHistoMod)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hSumHistoMod[5][10][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hMCNeut)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMCNeut[5][10][8][10][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hMCNeutModified)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMCNeutModified[5][10][8][10][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hMCNeutNom)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMCNeutNom[5][10][8][10][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hMod)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hSum)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hTmp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hTmp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gTmp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TGraph),-1,-1,1,"gTmp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gSum)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TGraph),-1,-1,1,"gSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gTotIntegral)-(long)(p)),100,0,0,-1,-1,-1,1,"gTotIntegral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->useSplineFlg)-(long)(p)),105,0,0,-1,-1,-1,1,"useSplineFlg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->useNormFlg)-(long)(p)),105,0,0,-1,-1,-1,1,"useNormFlg=",0,"< toggles normalization parameters when getting modified histograms");
   G__memvar_setup((void*)((long)(&p->normFactor)-(long)(p)),100,0,0,-1,-1,-1,1,"normFactor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->histoLogL)-(long)(p)),100,0,0,-1,-1,-1,1,"histoLogL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDOF)-(long)(p)),100,0,0,-1,-1,-1,1,"nDOF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nBinBuffer)-(long)(p)),105,0,0,-1,-1,-1,1,"nBinBuffer=",0,"< number of bins near edge of histogram to ignore when calculating likelihood");
   G__memvar_setup((void*)((long)(&p->theSplines)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_hSplines),-1,-1,1,"theSplines[5][10][8][6]=",0,"splines for flux/xsec params");
   G__memvar_setup((void*)((long)(&p->moreSplines)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_hSplines),-1,-1,1,"moreSplines[5][10][8][10][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->physicalLoBound)-(long)(p)),100,0,0,-1,-1,-1,1,"physicalLoBound[6]=",0,"< stores physical lower bounds");
   G__memvar_setup((void*)((long)(&p->applyPhysicalBound)-(long)(p)),105,0,0,-1,-1,-1,1,"applyPhysicalBound[6]=",0,"< flg for applying physical bounds");
   G__memvar_setup((void*)((long)(&p->hData)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hData[5][10][6]=",0,"array of all Data histograms");
   G__memvar_setup((void*)((long)(&p->Leg)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TLegend),-1,-1,1,"Leg=",0,"for histogram drawing methods");
   G__memvar_setup((void*)((long)(&p->h2d)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH2D),-1,-1,1,"h2d=",0,"for 2D debugging histograms");
   G__memvar_setup((void*)((long)(&p->binContents)-(long)(p)),100,0,0,-1,-1,-1,1,"binContents[1000]=",0,"< stores temporary bin contents for faster modificatoins");
   G__memvar_setup((void*)((long)(&p->separateNeutMode)-(long)(p)),103,0,0,-1,-1,-1,1,"separateNeutMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hMCMean)-(long)(p)),100,0,0,-1,-1,-1,1,"hMCMean[5][10][8][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fitPars)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_atmFitPars),-1,-1,1,"fitPars=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarhistoManager_cxx_ACLiC_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunchistoManager(void) {
   /* histoManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager));
   G__memfunc_setup("histoManager",1250,G__histoManager_cxx_ACLiC_dict_3304_0_1, 105, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager), -1, 0, 6, 1, 1, 0, 
"i - - 0 - nsampl i - - 0 - nbins "
"i - - 0 - ncomp C - - 10 '\"\"' name "
"i - - 0 '0' nmode g - - 0 'false' separateneutmode", "creates blank histogram manager", (void*) NULL, 0);
   G__memfunc_setup("histoManager",1250,G__histoManager_cxx_ACLiC_dict_3304_0_2, 105, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager), -1, 0, 7, 1, 1, 0, 
"C - - 10 - rootname i - - 0 - nsamp "
"i - - 0 - nbin i - - 0 - ncomp "
"i - - 0 - natt i - - 0 '0' nmode "
"g - - 0 'false' separateneutmode", "recreates a histoManager from a file", (void*) NULL, 0);
   G__memfunc_setup("histoManager",1250,G__histoManager_cxx_ACLiC_dict_3304_0_3, 105, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager), -1, 0, 2, 1, 1, 0, 
"i - - 0 - nptsmc i - - 0 - nptsdata", "< for unit testing, makes histoManager with gaussian histograms ", (void*) NULL, 0);
   G__memfunc_setup("histoManager",1250,G__histoManager_cxx_ACLiC_dict_3304_0_4, 105, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager), -1, 0, 3, 1, 1, 0, 
"C - - 10 - parfile i - - 0 '0' nmode "
"g - - 0 'false' separateneutmode", "< builds a histogram manager from histograms and values in parameter file", (void*) NULL, 0);
   G__memfunc_setup("setFitPars",1029,G__histoManager_cxx_ACLiC_dict_3304_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'atmFitPars' - 0 - thepars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initHistos",1070,G__histoManager_cxx_ACLiC_dict_3304_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistogram",1365,G__histoManager_cxx_ACLiC_dict_3304_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"d - - 0 - value d - - 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistogramData",1743,G__histoManager_cxx_ACLiC_dict_3304_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - iatt d - - 0 - value "
"d - - 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistogram",1274,G__histoManager_cxx_ACLiC_dict_3304_0_9, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - dataflg U 'TH1D' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLoBound",1023,G__histoManager_cxx_ACLiC_dict_3304_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - iatt d - - 0 - bound", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHistogram",1262,G__histoManager_cxx_ACLiC_dict_3304_0_11, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModHistogram",1550,G__histoManager_cxx_ACLiC_dict_3304_0_12, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", "gets histogram modified from atm pars", (void*) NULL, 0);
   G__memfunc_setup("getModHistogramMC",1694,G__histoManager_cxx_ACLiC_dict_3304_0_13, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", "gets histogram modified from atm pars", (void*) NULL, 0);
   G__memfunc_setup("getModGraph",1106,G__histoManager_cxx_ACLiC_dict_3304_0_14, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TGraph), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModHistogramSlow",1971,G__histoManager_cxx_ACLiC_dict_3304_0_15, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", "gets histogram modified from atm pars", (void*) NULL, 0);
   G__memfunc_setup("getHistogramData",1640,G__histoManager_cxx_ACLiC_dict_3304_0_16, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 3, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSplines",1054,G__histoManager_cxx_ACLiC_dict_3304_0_17, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_hSplines), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumHistogram",1571,G__histoManager_cxx_ACLiC_dict_3304_0_18, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - iatt i - - 0 '1' normFlg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumHistogramMod",1859,G__histoManager_cxx_ACLiC_dict_3304_0_19, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - iatt i - - 0 '1' normFlg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSplineModifiedHisto",2259,G__histoManager_cxx_ACLiC_dict_3304_0_20, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_TH1D), -1, 0, 4, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSplineModifiedBin",2021,G__histoManager_cxx_ACLiC_dict_3304_0_21, 100, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - ihistobin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showMCBreakdown",1518,G__histoManager_cxx_ACLiC_dict_3304_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - isample i - - 0 - ibin "
"i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printBreakdownPlots",2012,G__histoManager_cxx_ACLiC_dict_3304_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - plotdir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showMCBreakdownStack",2020,G__histoManager_cxx_ACLiC_dict_3304_0_24, 85, G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_THStack), -1, 0, 3, 1, 1, 0, 
"i - - 0 - isample i - - 0 - ibin "
"i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFromFile",1200,G__histoManager_cxx_ACLiC_dict_3304_0_25, 121, -1, -1, 0, 6, 1, 1, 0, 
"C - - 10 - rootname i - - 0 - nsamp "
"i - - 0 - nbin i - - 0 - ncomp "
"i - - 0 - natt i - - 0 '0' nmode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSplinesFromFile",1934,G__histoManager_cxx_ACLiC_dict_3304_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawSpline",1049,G__histoManager_cxx_ACLiC_dict_3304_0_27, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - hbin i - - 0 - isyst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawSpline2D",1167,G__histoManager_cxx_ACLiC_dict_3304_0_28, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - isyst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showErrorComparison",2022,G__histoManager_cxx_ACLiC_dict_3304_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - iatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showSysParVariation",2000,G__histoManager_cxx_ACLiC_dict_3304_0_30, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - ipar d - - 0 '1.0' varscale", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("histoManager", 1250, G__histoManager_cxx_ACLiC_dict_3304_0_31, (int) ('i'), G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager), -1, 0, 1, 1, 1, 0, "u 'histoManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~histoManager", 1376, G__histoManager_cxx_ACLiC_dict_3304_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__histoManager_cxx_ACLiC_dict_3304_0_33, (int) ('u'), G__get_linked_tagnum(&G__histoManager_cxx_ACLiC_dictLN_histoManager), -1, 1, 1, 1, 1, 0, "u 'histoManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunchistoManager_cxx_ACLiC_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalhistoManager_cxx_ACLiC_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funchistoManager_cxx_ACLiC_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TLegend = { "TLegend" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_THStack = { "THStack" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_hSplines = { "hSplines" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR = { "map<string,TString,less<string>,allocator<pair<const string,TString> > >" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_atmFitPars = { "atmFitPars" , 99 , -1 };
G__linked_taginfo G__histoManager_cxx_ACLiC_dictLN_histoManager = { "histoManager" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablehistoManager_cxx_ACLiC_dict() {
  G__histoManager_cxx_ACLiC_dictLN_TString.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TLegend.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TGraph.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TH1D.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TH2D.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_THStack.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_TFile.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_hSplines.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_atmFitPars.tagnum = -1 ;
  G__histoManager_cxx_ACLiC_dictLN_histoManager.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablehistoManager_cxx_ACLiC_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TString);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TLegend);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_THStack);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_TFile);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_hSplines);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_atmFitPars);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__histoManager_cxx_ACLiC_dictLN_histoManager),sizeof(histoManager),-1,294912,(char*)NULL,G__setup_memvarhistoManager,G__setup_memfunchistoManager);
}
extern "C" void G__cpp_setuphistoManager_cxx_ACLiC_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setuphistoManager_cxx_ACLiC_dict()");
  G__set_cpp_environmenthistoManager_cxx_ACLiC_dict();
  G__cpp_setup_tagtablehistoManager_cxx_ACLiC_dict();

  G__cpp_setup_inheritancehistoManager_cxx_ACLiC_dict();

  G__cpp_setup_typetablehistoManager_cxx_ACLiC_dict();

  G__cpp_setup_memvarhistoManager_cxx_ACLiC_dict();

  G__cpp_setup_memfunchistoManager_cxx_ACLiC_dict();
  G__cpp_setup_globalhistoManager_cxx_ACLiC_dict();
  G__cpp_setup_funchistoManager_cxx_ACLiC_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunchistoManager_cxx_ACLiC_dict();
  return;
}
class G__cpp_setup_inithistoManager_cxx_ACLiC_dict {
  public:
    G__cpp_setup_inithistoManager_cxx_ACLiC_dict() { G__add_setup_func("histoManager_cxx_ACLiC_dict",(G__incsetup)(&G__cpp_setuphistoManager_cxx_ACLiC_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_inithistoManager_cxx_ACLiC_dict() { G__remove_setup_func("histoManager_cxx_ACLiC_dict"); }
};
G__cpp_setup_inithistoManager_cxx_ACLiC_dict G__cpp_setup_initializerhistoManager_cxx_ACLiC_dict;

