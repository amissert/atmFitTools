//
// File generated by /nfs/data40/t2k/amissert/ROOT2/root/bin/rootcint at Wed Jan 11 13:19:01 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dInfsdIdata41dIt2kdIamissertdIatmosdIheaddIatmFitToolsdIsplineFactory_cxx_ACLiC_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "splineFactory_cxx_ACLiC_dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::splineFactory splineFactory;
      #else
      class splineFactory  {
         public:
         //friend XX;
         ::TString parFileName; //< name of parameter file
         ::TString nameTag; //< set in constructor. this is the prefix for the output file
         ::TTree* mcTree; //
         ::fqProcessedEvent* mcEvt; //
         ::histoManager* hManager; //manages all default histograms
         ::TH1D* hMC[5][10][8][6][5]; //array for modified histograms for spline creation
         ::TFile* fout; //output file
         ::TString foutName; //
         ::TH1D* htmp; //temporary histogram pointer
         int nSamp; //
         int nBin; //
         int nComp; //
         int nAtt; //
         int nSyst; //
         ::TString sysParType; //< code denoting the type of parameterization used, see setupSysPar
         ::atmFitPars* fitPars; //
         double attribute[6]; //
         double eventWeight; //
         ::sharedPars* runpars; //< runtime parameters
         double sigmaValues[5]; //
         ::TTree* splineTree; //
         int nbin; //
         int ncomponent; //
         int nattribute; //
         int nsample; //
         int nsystpar; //
         int npoints; //
         int nhistobins; //
         double systParValues[5]; //
         double binWeight[5][300]; //
         ::TH2D* h2DWeights; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void splineFactory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void splineFactory_Dictionary();
   static void *new_splineFactory(void *p = 0);
   static void *newArray_splineFactory(Long_t size, void *p);
   static void delete_splineFactory(void *p);
   static void deleteArray_splineFactory(void *p);
   static void destruct_splineFactory(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::splineFactory*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::splineFactory) == sizeof(::ROOT::Shadow::splineFactory));
      ::splineFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::splineFactory),0);
      static ::ROOT::TGenericClassInfo 
         instance("splineFactory", "/nfs/data41/t2k/amissert/atmos/head/atmFitTools/./splineFactory.h", 20,
                  typeid(::splineFactory), DefineBehavior(ptr, ptr),
                  &splineFactory_ShowMembers, &splineFactory_Dictionary, isa_proxy, 4,
                  sizeof(::splineFactory) );
      instance.SetNew(&new_splineFactory);
      instance.SetNewArray(&newArray_splineFactory);
      instance.SetDelete(&delete_splineFactory);
      instance.SetDeleteArray(&deleteArray_splineFactory);
      instance.SetDestructor(&destruct_splineFactory);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::splineFactory*)
   {
      return GenerateInitInstanceLocal((::splineFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::splineFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void splineFactory_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::splineFactory*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void splineFactory_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class splineFactory.
      typedef ::ROOT::Shadow::splineFactory ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::splineFactory*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parFileName", &sobj->parFileName);
      R__insp.InspectMember(sobj->parFileName, "parFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameTag", &sobj->nameTag);
      R__insp.InspectMember(sobj->nameTag, "nameTag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mcTree", &sobj->mcTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mcEvt", &sobj->mcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hManager", &sobj->hManager);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMC[5][10][8][6][5]", &sobj->hMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fout", &sobj->fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "foutName", &sobj->foutName);
      R__insp.InspectMember(sobj->foutName, "foutName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htmp", &sobj->htmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSamp", &sobj->nSamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBin", &sobj->nBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nComp", &sobj->nComp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nAtt", &sobj->nAtt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSyst", &sobj->nSyst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysParType", &sobj->sysParType);
      R__insp.InspectMember(sobj->sysParType, "sysParType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitPars", &sobj->fitPars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "attribute[6]", sobj->attribute);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventWeight", &sobj->eventWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*runpars", &sobj->runpars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaValues[5]", sobj->sigmaValues);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*splineTree", &sobj->splineTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbin", &sobj->nbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncomponent", &sobj->ncomponent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nattribute", &sobj->nattribute);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsample", &sobj->nsample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nsystpar", &sobj->nsystpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npoints", &sobj->npoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhistobins", &sobj->nhistobins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "systParValues[5]", sobj->systParValues);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "binWeight[5][300]", sobj->binWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h2DWeights", &sobj->h2DWeights);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_splineFactory(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::splineFactory : new ::splineFactory;
   }
   static void *newArray_splineFactory(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::splineFactory[nElements] : new ::splineFactory[nElements];
   }
   // Wrapper around operator delete
   static void delete_splineFactory(void *p) {
      delete ((::splineFactory*)p);
   }
   static void deleteArray_splineFactory(void *p) {
      delete [] ((::splineFactory*)p);
   }
   static void destruct_splineFactory(void *p) {
      typedef ::splineFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::splineFactory

/********************************************************
* /nfs/data41/t2k/amissert/atmos/head/atmFitTools/splineFactory_cxx_ACLiC_dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablesplineFactory_cxx_ACLiC_dict();

extern "C" void G__set_cpp_environmentsplineFactory_cxx_ACLiC_dict() {
  G__cpp_reset_tagtablesplineFactory_cxx_ACLiC_dict();
}
#include <new>
extern "C" int G__cpp_dllrevsplineFactory_cxx_ACLiC_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* splineFactory */
static int G__splineFactory_cxx_ACLiC_dict_3305_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   splineFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new splineFactory(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) splineFactory(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   splineFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new splineFactory((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) splineFactory((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   splineFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new splineFactory[n];
     } else {
       p = new((void*) gvp) splineFactory[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new splineFactory;
     } else {
       p = new((void*) gvp) splineFactory;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->resetModHistos();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((splineFactory*) G__getstructoffset())->getEvtWeight((fqProcessedEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->setOutputFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((splineFactory*) G__getstructoffset())->getOutputFileName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->makeManagerFromFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->fillBranches((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->setMCTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->setupOutputFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->buildTheSplines();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->buildSplineForPar((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->debugtest();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->runSplineFactory();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->setupHistos();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__splineFactory_cxx_ACLiC_dict_3305_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((splineFactory*) G__getstructoffset())->incrementSystPars((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__splineFactory_cxx_ACLiC_dict_3305_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   splineFactory* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new splineFactory(*(splineFactory*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef splineFactory G__TsplineFactory;
static int G__splineFactory_cxx_ACLiC_dict_3305_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (splineFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((splineFactory*) (soff+(sizeof(splineFactory)*i)))->~G__TsplineFactory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (splineFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((splineFactory*) (soff))->~G__TsplineFactory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__splineFactory_cxx_ACLiC_dict_3305_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   splineFactory* dest = (splineFactory*) G__getstructoffset();
   *dest = *(splineFactory*) libp->para[0].ref;
   const splineFactory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* splineFactory */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncsplineFactory_cxx_ACLiC_dict {
 public:
  G__Sizep2memfuncsplineFactory_cxx_ACLiC_dict(): p(&G__Sizep2memfuncsplineFactory_cxx_ACLiC_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncsplineFactory_cxx_ACLiC_dict::*p)();
};

size_t G__get_sizep2memfuncsplineFactory_cxx_ACLiC_dict()
{
  G__Sizep2memfuncsplineFactory_cxx_ACLiC_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancesplineFactory_cxx_ACLiC_dict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablesplineFactory_cxx_ACLiC_dict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TString>",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TString,less<string> >",117,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* splineFactory */
static void G__setup_memvarsplineFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory));
   { splineFactory *p; p=(splineFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->parFileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TString),-1,-1,1,"parFileName=",0,"< name of parameter file");
   G__memvar_setup((void*)((long)(&p->nameTag)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TString),-1,-1,1,"nameTag=",0,"< set in constructor. this is the prefix for the output file");
   G__memvar_setup((void*)((long)(&p->mcTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TTree),-1,-1,1,"mcTree=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcEvt)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_fqProcessedEvent),-1,-1,1,"mcEvt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hManager)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_histoManager),-1,-1,1,"hManager=",0,"manages all default histograms");
   G__memvar_setup((void*)((long)(&p->hMC)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"hMC[5][10][8][6][5]=",0,"array for modified histograms for spline creation");
   G__memvar_setup((void*)((long)(&p->fout)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TFile),-1,-1,1,"fout=",0,"output file");
   G__memvar_setup((void*)((long)(&p->foutName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TString),-1,-1,1,"foutName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->htmp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TH1D),-1,-1,1,"htmp=",0,"temporary histogram pointer");
   G__memvar_setup((void*)((long)(&p->nSamp)-(long)(p)),105,0,0,-1,-1,-1,1,"nSamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nBin)-(long)(p)),105,0,0,-1,-1,-1,1,"nBin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nComp)-(long)(p)),105,0,0,-1,-1,-1,1,"nComp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nAtt)-(long)(p)),105,0,0,-1,-1,-1,1,"nAtt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nSyst)-(long)(p)),105,0,0,-1,-1,-1,1,"nSyst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sysParType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TString),-1,-1,1,"sysParType=",0,"< code denoting the type of parameterization used, see setupSysPar");
   G__memvar_setup((void*)((long)(&p->fitPars)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_atmFitPars),-1,-1,1,"fitPars=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->attribute)-(long)(p)),100,0,0,-1,-1,-1,1,"attribute[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventWeight)-(long)(p)),100,0,0,-1,-1,-1,1,"eventWeight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runpars)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_sharedPars),-1,-1,1,"runpars=",0,"< runtime parameters");
   G__memvar_setup((void*)((long)(&p->sigmaValues)-(long)(p)),100,0,0,-1,-1,-1,1,"sigmaValues[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splineTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TTree),-1,-1,1,"splineTree=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nbin)-(long)(p)),105,0,0,-1,-1,-1,1,"nbin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ncomponent)-(long)(p)),105,0,0,-1,-1,-1,1,"ncomponent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nattribute)-(long)(p)),105,0,0,-1,-1,-1,1,"nattribute=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nsample)-(long)(p)),105,0,0,-1,-1,-1,1,"nsample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nsystpar)-(long)(p)),105,0,0,-1,-1,-1,1,"nsystpar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->npoints)-(long)(p)),105,0,0,-1,-1,-1,1,"npoints=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nhistobins)-(long)(p)),105,0,0,-1,-1,-1,1,"nhistobins=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->systParValues)-(long)(p)),100,0,0,-1,-1,-1,1,"systParValues[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->binWeight)-(long)(p)),100,0,0,-1,-1,-1,1,"binWeight[5][300]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->h2DWeights)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TH2D),-1,-1,1,"h2DWeights=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarsplineFactory_cxx_ACLiC_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncsplineFactory(void) {
   /* splineFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory));
   G__memfunc_setup("splineFactory",1379,G__splineFactory_cxx_ACLiC_dict_3305_0_1, 105, G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory), -1, 0, 6, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - isyst C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splineFactory",1379,G__splineFactory_cxx_ACLiC_dict_3305_0_2, 105, G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory), -1, 0, 1, 1, 1, 0, "C - - 10 - parfile", "< initialize using parameters in par file", (void*) NULL, 0);
   G__memfunc_setup("splineFactory",1379,G__splineFactory_cxx_ACLiC_dict_3305_0_3, 105, G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetModHistos",1469,G__splineFactory_cxx_ACLiC_dict_3305_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtWeight",1239,G__splineFactory_cxx_ACLiC_dict_3305_0_5, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'fqProcessedEvent' - 0 - mcevent i - - 0 - ipar "
"d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputFileName",1758,G__splineFactory_cxx_ACLiC_dict_3305_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputFileName",1746,G__splineFactory_cxx_ACLiC_dict_3305_0_7, 117, G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeManagerFromFile",1901,G__splineFactory_cxx_ACLiC_dict_3305_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", "reads in histograms from histoFactory", (void*) NULL, 0);
   G__memfunc_setup("fillBranches",1229,G__splineFactory_cxx_ACLiC_dict_3305_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - isamp i - - 0 - ibin "
"i - - 0 - icomp i - - 0 - iatt "
"i - - 0 - isyst", "fills leaves of output tree", (void*) NULL, 0);
   G__memfunc_setup("setMCTree",876,G__splineFactory_cxx_ACLiC_dict_3305_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupOutputFile",1602,G__splineFactory_cxx_ACLiC_dict_3305_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildTheSplines",1551,G__splineFactory_cxx_ACLiC_dict_3305_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildSplineForPar",1733,G__splineFactory_cxx_ACLiC_dict_3305_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - isyspar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("debugtest",967,G__splineFactory_cxx_ACLiC_dict_3305_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runSplineFactory",1688,G__splineFactory_cxx_ACLiC_dict_3305_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupHistos",1195,G__splineFactory_cxx_ACLiC_dict_3305_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incrementSystPars",1806,G__splineFactory_cxx_ACLiC_dict_3305_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - isyspar d - - 0 - nsig", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("splineFactory", 1379, G__splineFactory_cxx_ACLiC_dict_3305_0_18, (int) ('i'), G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory), -1, 0, 1, 1, 1, 0, "u 'splineFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~splineFactory", 1505, G__splineFactory_cxx_ACLiC_dict_3305_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__splineFactory_cxx_ACLiC_dict_3305_0_20, (int) ('u'), G__get_linked_tagnum(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory), -1, 1, 1, 1, 1, 0, "u 'splineFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncsplineFactory_cxx_ACLiC_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalsplineFactory_cxx_ACLiC_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcsplineFactory_cxx_ACLiC_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR = { "map<string,TString,less<string>,allocator<pair<const string,TString> > >" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_sharedPars = { "sharedPars" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_atmFitPars = { "atmFitPars" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_fqProcessedEvent = { "fqProcessedEvent" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_histoManager = { "histoManager" , 99 , -1 };
G__linked_taginfo G__splineFactory_cxx_ACLiC_dictLN_splineFactory = { "splineFactory" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablesplineFactory_cxx_ACLiC_dict() {
  G__splineFactory_cxx_ACLiC_dictLN_TString.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TH1D.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TH2D.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TFile.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_TTree.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_sharedPars.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_atmFitPars.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_fqProcessedEvent.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_histoManager.tagnum = -1 ;
  G__splineFactory_cxx_ACLiC_dictLN_splineFactory.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablesplineFactory_cxx_ACLiC_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TString);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TFile);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_TTree);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_maplEstringcOTStringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_sharedPars);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_atmFitPars);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_fqProcessedEvent);
   G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_histoManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__splineFactory_cxx_ACLiC_dictLN_splineFactory),sizeof(splineFactory),-1,295168,(char*)NULL,G__setup_memvarsplineFactory,G__setup_memfuncsplineFactory);
}
extern "C" void G__cpp_setupsplineFactory_cxx_ACLiC_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupsplineFactory_cxx_ACLiC_dict()");
  G__set_cpp_environmentsplineFactory_cxx_ACLiC_dict();
  G__cpp_setup_tagtablesplineFactory_cxx_ACLiC_dict();

  G__cpp_setup_inheritancesplineFactory_cxx_ACLiC_dict();

  G__cpp_setup_typetablesplineFactory_cxx_ACLiC_dict();

  G__cpp_setup_memvarsplineFactory_cxx_ACLiC_dict();

  G__cpp_setup_memfuncsplineFactory_cxx_ACLiC_dict();
  G__cpp_setup_globalsplineFactory_cxx_ACLiC_dict();
  G__cpp_setup_funcsplineFactory_cxx_ACLiC_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncsplineFactory_cxx_ACLiC_dict();
  return;
}
class G__cpp_setup_initsplineFactory_cxx_ACLiC_dict {
  public:
    G__cpp_setup_initsplineFactory_cxx_ACLiC_dict() { G__add_setup_func("splineFactory_cxx_ACLiC_dict",(G__incsetup)(&G__cpp_setupsplineFactory_cxx_ACLiC_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initsplineFactory_cxx_ACLiC_dict() { G__remove_setup_func("splineFactory_cxx_ACLiC_dict"); }
};
G__cpp_setup_initsplineFactory_cxx_ACLiC_dict G__cpp_setup_initializersplineFactory_cxx_ACLiC_dict;

